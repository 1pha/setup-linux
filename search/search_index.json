{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ubuntu-setup","text":"<p>This wiki is about tricks afronted while doing deep learnings on server environments</p>"},{"location":"#1-about-python-tricks","title":"1. About python tricks","text":""},{"location":"#2-about-linux-tricks","title":"2. About linux tricks","text":""},{"location":"#3-about-docker-tricks","title":"3. About docker tricks","text":""},{"location":"#4-about-deep-learning-implementations","title":"4. About deep learning implementations","text":""},{"location":"01_python/0_index/","title":"Python Setups","text":""},{"location":"01_python/0_index/#1-install-anaconda","title":"1. Install Anaconda","text":""},{"location":"01_python/1_conda/","title":"Anaconda installation","text":"<ul> <li>Instructions <pre><code>installsh=Anaconda3-2023.03-Linux-x86_64.sh\nwget https://repo.anaconda.com/archive/${installsh}\nshasum -a 256 ${installsh}\nbash ${installsh}\n</code></pre></li> </ul>"},{"location":"01_python/troubleshoots/0_index/","title":"Python Troubleshoots","text":"<p>Collections of shitty python troubleshoots and tricks</p>"},{"location":"02_linux/1_zsh/","title":"<code>zsh</code>","text":"<p>Why <code>zsh</code>? - <code>zsh</code> is more capable of auto-completion, boosting productivity for developers.</p>"},{"location":"02_linux/1_zsh/#installing-zsh","title":"Installing <code>zsh</code>","text":"Install zsh<pre><code>sudo apt-get update # (1)\nsudo apt install zsh\n</code></pre> <ol> <li>:man_raising_hand: \uc790\uc8fc\ud560\uc218\ub85d \uc794 \uc5d0\ub7ec\uac00 \uc548\uc0dd\uae40</li> </ol>"},{"location":"02_linux/1_zsh/#zsh-as-default-shell","title":"<code>zsh</code> as default shell","text":"<pre><code>chsh -s $(which zsh)\n</code></pre>"},{"location":"02_linux/1_zsh/#pretty-zsh","title":"Pretty ZSH","text":"<pre><code>sh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\ngit clone https://github.com/sindresorhus/pure.git ~/.zsh/pure\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.zsh/zsh-syntax-highlighting\ngit clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions\n</code></pre> <ul> <li>Append the followings to <code>~/.zshrc</code> file.</li> <li><code>source activate</code> may not work if conda is not installed. After installing anaconda, the command will not provoke an error <pre><code>path+=/opt/conda/bin\nTZ=Asia/Seoul\nLANG=C.UTF-8\nLC_ALL=C.UTF-8\nPYTHONDONTWRITEBYTECODE=1\nPYTHONUNBUFFERED=1\nPYTHONIOENCODING=UTF-8\nPYTHONHTTPSVERIFY=0\nfpath+=(\"$HOME/.zsh/pure\")\\nautoload -U promptinit; promptinit\\nprompt pure\nsource ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\nsource ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh\nZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=111'\nsource activate\n</code></pre></li> </ul>"},{"location":"02_linux/2_ssh/","title":"<code>ssh</code> Connection","text":""},{"location":"02_linux/2_ssh/#1-starting-ssh","title":"1. Starting <code>ssh</code>","text":"<pre><code>sudo apt-get update\nsudo apt-get install openssh-server\nsudo systemctl restart sshd\n</code></pre>"},{"location":"02_linux/2_ssh/#2-ssh-without-passwd-use-pub-keys","title":"2. <code>ssh</code> without passwd: use pub keys","text":""},{"location":"02_linux/2_ssh/#1-create-a-new-key","title":"(1) Create a New Key","text":"<pre><code>cd ~/.ssh\nssh-keygen -t rsa -f id_rsa\nls\n&gt;&gt;&gt; id_rsa id_rsa.pub\n</code></pre>"},{"location":"02_linux/2_ssh/#2-send-id_rsapub-to-remote-server","title":"(2) Send <code>id_rsa.pub</code> to remote server","text":"<p>Send public key to remote server <pre><code>scp -P 22 id_rsa.pub (user)@(IP):(ABS_PATH)\n</code></pre></p>"},{"location":"02_linux/2_ssh/#3-edit-keys-at-your-remote-server","title":"(3) Edit keys at your remote server","text":"<pre><code>ssh (user)@(IP) -p 22\nmkdir ~/.ssh # ~/.ssh \ub514\ub809\ud1a0\ub9ac\uac00 \uc5c6\ub294 \uacbd\uc6b0\nchmod 700 ~/.ssh\n\ncat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>"},{"location":"02_linux/2_ssh/#4-upload-new-ip-on-config","title":"(4) Upload new IP on Config","text":"<p>Where is ssh configuration?</p> <ul> <li>In general ssh configuration file <code>config</code> stays in your <code>~/.ssh/</code> directory.</li> <li>Basic setup as follows</li> <li>Put your <code>id_rsa</code> key name in <code>IdentityFile</code></li> </ul> <pre><code>Host (HOSTNAME)\n  HostName (IP)\n  User (USERNAME)\n  Port (PORT-NUMBER)\n  IdentityFile ~/.ssh/id_rsa\n</code></pre>"},{"location":"02_linux/2_ssh/#proxy-jumps","title":"Proxy Jumps","text":"<ul> <li>Reference <pre><code>Host HostA\n  HostName hostA\n  User userA\n\nHost HostB\n  HostName hostB\n  User userB\n  ProxyJump HostA\n</code></pre></li> <li>One can add <code>IdentityFile</code> on final target server <code>HostB</code></li> </ul> <p>Who needs proxy?</p> <ul> <li>Some servers are not accessible even with VPN</li> <li>lab-2080 server is the only available server access thorugh VPN and other servers can be accessed via lab-2080 server.</li> <li>Also, VSCode IDE is available for non-accessible servers with VPN with proxy jump settings.</li> </ul>"},{"location":"02_linux/3_gpu/","title":"Nvidia setups for linux","text":"<ul> <li>Follow the official instructions from nvidia. Below 3 paragraphs are most essential.<ul> <li>2. Pre-install</li> <li>3.10 Ubuntu Package Manager Installation</li> <li>4. Driver installation</li> </ul> </li> <li> <p>This worked for me (Mar 22, 2023), by follwoing the instructions <pre><code>sudo apt install cuda-drivers-525\nlspci | grep -i nvidia\nuname -m &amp;&amp; cat /etc/*release\nsudo apt-get install linux-headers-$(uname -r)\nsudo apt autoremove\nsudo apt-get install linux-headers-$(uname -r)\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb\nsudo dpkg -i cuda-keyring_1.0-1_all.deb\nsudo apt-get update\nsudo apt-get -y install cuda\nsudo dpkg -i cuda-keyring_1.0-1_all.deb\nsudo apt-key del 7fa2af80\nsudo apt-get update\nsudo apt-get install cuda\nsudo apt-get install nvidia-gds\nsudo reboot\nsudo apt-get install cuda-drivers-525\nsudo reboot\nnvidia-smi\n</code></pre></p> </li> <li> <p>Use <code>nvidia-smi</code> to check </p> </li> </ul>"},{"location":"02_linux/4_github/","title":"GitHub (<code>gh</code>)","text":"<p><code>gh</code> is a command to authenticate/login to your account. Basic <code>git</code> command is different from <code>gh</code>.</p>"},{"location":"02_linux/4_github/#install-gh","title":"Install <code>gh</code>","text":"<p>Installing gh. One may need 'sudo su' to make it happen<pre><code>type -p curl &gt;/dev/null || sudo apt install curl -y\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&amp;&amp; sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list &gt; /dev/null \\\n&amp;&amp; sudo apt update \\\n&amp;&amp; sudo apt install gh -y\n</code></pre> Upgrade gh<pre><code>sudo apt update\nsudo apt install gh\n</code></pre></p>"},{"location":"02_linux/4_github/#github-login-through-cli","title":"GitHub Login through CLI","text":"<p>Then login through <code>gh</code>. If you're running this on your server, choose \"Paste an authentication token\" on third choice, and paste your developer personal access tokens. <pre><code>gh auth login\n</code></pre></p> <p>What is <code>gpg keys</code>?</p> <p>GitHub no longer allows you to type in passwords on CLI, which means no one can clone/pull/commit anything on cli through passwords. Instead, everybody uses Personal access tokens. Lookup here for more details</p>"},{"location":"02_linux/02_03_commands/1_watch/","title":"watch","text":""},{"location":"02_linux/02_03_commands/1_watch/#watch-to-monitor-something","title":"<code>watch</code>: To monitor something","text":"<p>For gpu monitoring <pre><code>watch -d -n 0.5 nvidia-smi\n</code></pre></p> <ul> <li><code>-d</code>: Show difference</li> <li><code>-n</code>: Time interval</li> </ul>"},{"location":"02_linux/02_03_commands/2_tmux/","title":"tmux","text":""},{"location":"02_linux/02_03_commands/2_tmux/#tmux-running-in-background-but-accessible","title":"<code>tmux</code>: Running in background, but accessible","text":"Installing tmux<pre><code>sudo apt-get install tmux\n</code></pre>"},{"location":"02_linux/02_03_commands/2_tmux/#basic-usage","title":"Basic usage","text":"<ul> <li><code>tmux</code> consists of session - pane hierarchy. <code>work</code> is the name of session.</li> <li>New session: <code>tmux new -s work</code></li> <li>Exit session: CTRL B, D</li> <li>Resume to session: <code>tmux attach -t work</code></li> <li>Divide session into pane:<ul> <li>Horizontal spilt: CTRL B, \"</li> <li>Vertical split: CTRL B, %</li> </ul> </li> <li>Entering Command mode: CTRL B, :<ul> <li>Removing panes: <code>kill-pane -t (index)</code>, where index counts from 0</li> </ul> </li> </ul>"},{"location":"02_linux/02_03_commands/3_rsync/","title":"rsync","text":""},{"location":"02_linux/02_03_commands/3_rsync/#rsync-send-files-to-remote-server","title":"<code>rsync</code>: Send files to remote server","text":"<p>Basic rsync usage<pre><code>rsync -e 'ssh -p 20000' LOCALDIR REMOTEDIR\n</code></pre> Flags</p> <ul> <li><code>-v</code>: verbosity</li> <li><code>-r</code>: recursive</li> <li><code>-a</code>: archive mode</li> <li><code>-z</code>: Data compress</li> <li><code>-h</code>: Human-readable</li> <li><code>-e</code>: Extra ssh flags to feed</li> </ul> <p>Sometimes permission issue may be raised. Use <code>chmod -R 777 (TARGET_DIR)</code> to add permission</p> <p>Reference</p> <ul> <li>Rsync basics</li> <li>Changing ports</li> </ul>"},{"location":"02_linux/02_03_commands/4_storage/","title":"storage","text":""},{"location":"02_linux/02_03_commands/4_storage/#checking-storage-for-certain-directory","title":"Checking storage for certain directory","text":"<pre><code>ls | xargs du -sh\n</code></pre> <p>What is <code>xargs</code>?</p> <p>Sometimes you want outputs from a certain command such as list, and feed them to other commands. This is available through <code>xargs</code>. Above command allows <code>ls</code> stdout to be stdin of <code>du -sh</code> command.</p>"},{"location":"02_linux/02_03_commands/5_mount/","title":"mount","text":""},{"location":"02_linux/02_03_commands/5_mount/#mounting-external-disk","title":"Mounting External disk","text":"Mounting external disk<pre><code>sudo fdisk -l\nsudo mkfs.ext4 /dev/sda # (1)\nsudo mount /dev/sda /mnt\n</code></pre> <ol> <li>Please check your disk name: <code>dev/sda</code></li> </ol>"},{"location":"02_linux/02_03_commands/6_files/","title":"Files","text":""},{"location":"02_linux/02_03_commands/6_files/#count-number-of-files","title":"Count number of files","text":"<pre><code>ls | wc -l\n</code></pre> <p>What is <code>|</code>?</p> <p><code>|</code> works as a pipe. This operand will take outputs from previous command and send it to next command. From above example, <code>wc -l</code> will count the number of outputs from <code>ls</code>.</p>"},{"location":"02_linux/02_03_commands/6_files/#removing-certain-files","title":"Removing certain files","text":"For certain files not directories<pre><code>find . -type f -name '*.o'\nfind . -type dir -name '*.o'\n# Remove certain files\nfind . -type f -name '*.o' | xargs rm -r\nfind . -type f -name '*.o' -delete\n</code></pre> <p>For some reasons, this does not delete Reference</p>"},{"location":"02_linux/02_03_commands/7_users/","title":"Ubuntu Users","text":""},{"location":"02_linux/02_03_commands/7_users/#add-user","title":"Add User","text":"Add user<pre><code>adduser 1pha\nsudo usermod -aG sudo 1pha\n</code></pre>"},{"location":"02_linux/02_03_commands/7_users/#checking-out-to-other-user","title":"Checking out to other User","text":"checkout<pre><code>su 1pha\n</code></pre>"},{"location":"02_linux/02_03_commands/8_zip/","title":"Compress &amp; Unzip Files","text":""},{"location":"02_linux/02_03_commands/8_zip/#zip","title":"<code>zip</code>","text":"<p>Note that it's a good convention to <code>.zip</code> extension in <code>(FILENAME)</code> Compress with zip<pre><code>zip (FILENAME) (TARGET_DIR)\n</code></pre></p> <p>If <code>(TARGET_DIR)</code> contains subdirectory, than recursive flag of <code>-r</code> is required. Compress with zip with subdirectories<pre><code>zip -r (FILENAME) (TARGET_DIR)\n</code></pre></p> Unzip<pre><code>unzip (FILENAME)\nunzip (FILENAME) -d (TARGET_DIR)\n</code></pre>"},{"location":"02_linux/02_03_commands/8_zip/#tar","title":"<code>tar</code>","text":"<p>Flags * <code>-z</code>: Compress with gzip(gz) * <code>-j</code>: Compress with bzip2(bz) * <code>-c</code>: collect to tar * <code>-x</code>: extract tar * <code>-f</code>: (Mandatory) Collects file * <code>-v</code>: Verbosity * <code>-p</code>: Compress with ownership</p> <p>What is the difference between <code>.tar</code> and <code>.tar.gz</code>?</p> <p><code>.tar</code> does NOT compress directories but rather collects all files to archive. Compressed <code>.tar</code> file becomes <code>.tar.gz</code>. This uses gunzip to compress files.</p> <p><code>(FILENAME)</code> contains <code>.tar</code> Compress and decompress to tar<pre><code># Compress\ntar -cvf (FILENAME) (TARGETDIR)\n# Decompress\ntar -xvf (FILENAME)\n</code></pre></p> Compress and decompress to tar.gz<pre><code># Compress\ntar -zcvf (FILENAME) (TARGETDIR)\n# Decompress\ntar -zxvf (FILENAME)\n</code></pre>"},{"location":"03_dl/","title":"Deep Learning","text":"<p>Deep learning model implementation will be posted here.</p>"},{"location":"homeworks/","title":"Works to do","text":""},{"location":"homeworks/#1-grafana","title":"1. grafana","text":""},{"location":"homeworks/grafana/","title":"Grafana","text":"<ul> <li>Basic Tutorials</li> <li>Tutorial from RedHat</li> </ul>"}]}